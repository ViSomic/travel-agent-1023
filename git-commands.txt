В файле .gitignore указываются файлы, которые будут игнорироваться для отслеживания

git config --system
git config --global 
git config --local или просто git config
git init
git log
	-p выведет подробную информацию о коммитах
git status
git add
git commit -m "Text for commit"
	-am берет все файлы под версионным контролем и добавляет изменения в них в коммит
git restore  откатывает файл или весь проект до состояния последнего коммита
git diff показывает изменения в файле
	--staged показывает изменеия в индексе
git mv переименовывание или перемещение файлов
git rm удаление файла из коммита и рабочего каталога
	--cashed удаляет файл только из коммита и он становится неотслаживаемым
git show hashCode показывает состояние коммита, хэш которого был введен

Ветки в гите:
git branch second-branch создание новой ветки Второй
git branch -a просмотр всех существующих веток проекта
git checkout second-branch переключение на Вторую ветку
git checkout HashCode переключится на коммит с указаннам хэш кодом, изменения после ну будут отображаться
git checkout -b third-branch создаст Третью ветку и сразу на нее переключится
git merge second-branch присоединение изменений из Второй ветки в основную
git branch -d second-branch удаление второй ветки

Подключение к gitHub
git remote add origin ссылкаИзГитХаб-SSH подлючение к редозиторию на гит хаб
git push origin main отправка изменений на Оригин сервер в ветку Основная
git pull origin main забирает изменения с удаленного репозитория
git clone СсылкаИзГитхаба клонирует репозиторий из гит хаба на локальный компьютер
git fetch origin актуальное состояние удаленных веток
git push --set-upstream origin master делается один раз, сопоставляет ветки на удаленном репозитории и на локальном.

Теги
git tag v1 создание легковесного тега на текущем коммите
git tag -a R2023 -m "Message" создание аннотированного тега на коммите
git push origin v1 отправка тега на удаленный репозиторий
git push --tags отправка всех тегов